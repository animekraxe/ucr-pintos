			+--------------------------+
			|		    CS 153         |
			| PROJECT 2: USER PROGRAMS |
			| 	   DESIGN DOCUMENT     |
			+--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Brandon Huynh <bhuyn006@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

Notes from CS153 Labs 5 and 6 details and pseudo-code written on whiteboard.
Also used implementation suggestions from:
http://courses.cs.vt.edu/~cs3204/fall2009/pintos-vt-local/Project2Session.pdfs

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No newly defined structs, global or static variables, typedefs, or enumerations
were defined. Argument passing is only implemented using a local array
and local pointers or copies of the command line string

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

I built a small static array of 30, assuming a limit to the amount of arguments passed as
suggested by PINTOS documentation. This avoids overflowing the stack page.
I used strtok_r to tokenize the commandline string, delimiting by spaces. 
I placed the pointer to each string forward in the array. I then traversed the array backwards 
to copy them in reverse onto the stack, storing the new stack address for each in the same array as I went.
Finally, I traversed the array backwards one more time, this time placing the addresses to each argument
on the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() is not thread safe because it relies on internal memory to maintain state of tokens.
strtok_r() uses external memory, supplied and managed by each calling thread, thus
protecting state from being corruped by calls from multiple threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1. The shell can verify whether the command exists or not and shortcircuit the operation
before creating a process. This affords safety by avoiding potential memory leaks and security issues 
tha can be caused by unnecessary switching to kernel before validating the executable.

2. This also allows the shell to handle multiple executabes that communicate with each other using semantics
like piping. This avoids having the kernel juggle executing processes that may recursively communicate with one another.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* 
    Defines Load States.
    LOAD_PENDING = load() has not been called
    LOAD_SUCCESS = load() returned true
    LOAD_FAILURE = load() return false
*/
enum load_status
{
	LOAD_PENDING,
	LOAD_SUCCESS,
	LOAD_FAILURE
};

/*
    Process Bookkeeping
    Stores the process information for a user process running in a thread
*/
struct process {
    pid_t pid;                          /* My process ID */
    tid_t parent_tid;                   /* My parent thread TID */
    bool already_waiting;               /* True: wait() already called on me, False otherwise */
    enum load_status load_state;        /* LOAD status used for signaling exec() in parent to complete */
    bool is_done;                       /* True: exit() already called on me, False otherwise */
    int exit_status;                    /* Return status for exit() call. */
    struct list_elem cpelem;            /* List element for child_list when a child of other processes */
};

//One global lock for filesystem calls as per slides recommendation
//(See consulted sources in DESIGNDOC)
struct lock file_lock;

// Info for file a file to access through a threads file_list
struct file_info { 
    int fd;                     /* This files fd */ 
    struct file* file;          /* This files file pointer */
    struct list_elem felem;     /* THIS files element in file_list for a thread */
};

New in struct thread:

    //Filesystem Bookkeeping
    struct list file_list;              /* List of all files this thread has opened*/
    int fd;                             /* The next available file descriptor */
    struct file* executing_file;        /* File containing the open executable for this process */

    //Child process bookkeeping
    struct list child_list;             /* List of all child processes whose parent is this thread */
    struct process* process;            /* Process info for a user process running in this thread */


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors are unique within a single process, which was my interpretation
of the documentation. Explained under the open() system call, it says:

	"Each process has an independent set of file descriptors."

Files are instead associated with ownership between various processes by belonging
in a list of open files for each process, the file_list. 

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

I validate ALL user data provided to a system call by using the function
is_user_vaddr(). I do this for the system call as well. 
Furthermore, for read and writes, I validate the provided buffer
with pagedir_get_page() to ensure that it is mapped memory that is accessible
by the kernel. Once I have the kernel address for the provided buffer,
we read and write to it. The actual file system calls manage errors
due to incorrect fd or size, which I simply report back. For stdin or stdout
I simply use input_getc or putbuf for the specified size.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

It would validate all user data provided, likely calling 4096 inspections
of the page table for 4096 bytes of data. A system call that only copies 2 bytes
only call pagedir_get_page twice. We could improve these numbers massively by
modifying the page_table lookup to lookup continuously on a given page until it
hits the end of a full page size, before continuing. This would allow us to
reduce our calls to only the amount of pages that are spanned by the user data.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

The wait() call validates the process (does it exist, is it already dying,
has wait alreay been called previously).

Once it's validated, we busy wait until the process is_done flag is set.
Then we return it's exit_status. In this way, it doesn't deal with process
termination at all. Waited-on process terminates itself then informs
the waiting process through synchronized flags.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

The main strategy for avoiding bad pointer errors is to validate the user
data coming from a system call, including the call number, arguments,
and the buffer provided for read/writes or file name buffers. This way,
we restrict most of the error-handling code to validation in the
systemcall handler.

When errors are detected, we free the process by freeing all resources
in use in process_exit. This includes freeing all children and closing all files
currently running. We do this by invoking exit() which invokes both process_exit
and thread_exit to clean up thread resources.

Finally, when page faults occur, we also similarly free the faulting thread
by calling process_exit and thread_exit, freeing all resources in use.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

The exec() call does this by waiting on the new process' load_state variable.
This signifies whether a load is pending or has a completed (and whether it
succeeded or failed). The parent who called exec() is the only one
waiting on that value, so synchronization is trivial. The new process
set's this variable immediately after the call to load(), which will complete
regardless of success or failure, ensuring that the waiting parent is not stuck.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

A child process C frees it's own resources before it exits. It also informs parent's
P by setting it's is_done flag in the parent's child_list of process information.
This ensures that even if the child exits after a call to wait, the parent
will know because it will have information on that child in it's child_list.
The parent itself frees this information on it's own exit, so all resources
are freed when the parent is freed. There is one special case if P terminates without waiting 
before C terminates, which will cause C to leak resources because it would be terminated by 
P before it could free it's own resources.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because it also afforded an easy location for exiting when user memory was
invalid. This way, resources are freed and we cleanly exit either when
memory is invalid on syscalls or when page faulted due to user exception.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The advantage is that it's easy to validate ownership of a file given
a process. The disadvantage is that it's difficult to figure out who
has a file given only the file descriptor, as each file has it's own 
independent set of file descriptors that are managed within itself. Different
processes can have different files using the same file descriptor.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

I didn't think of any advantages to changing it, so I didn't.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?